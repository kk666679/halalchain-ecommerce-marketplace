// Prisma schema for HalalChain E-commerce Platform
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  CUSTOMER
  VENDOR
  ADMIN
  AUDITOR
}

enum OrderStatus {
  PENDING
  CONFIRMED
  SHIPPED
  DELIVERED
  CANCELLED
}

enum HalalStatus {
  PENDING
  VERIFIED
  REJECTED
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  role      UserRole @default(CUSTOMER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  orders    Order[]
  vendor    Vendor?
  cartItems CartItem[]

  @@map("users")
}

model Vendor {
  id          String   @id @default(cuid())
  userId      String   @unique
  storeName   String
  description String?
  rating      Float?   @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  products Product[]

  @@map("vendors")
}

model Product {
  id              String      @id @default(cuid())
  name            String
  description     String?
  price           Float
  category        String
  vendorId        String
  halalCertified  Boolean     @default(false)
  blockchainHash  String?
  stockQuantity   Int         @default(0)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  // Relations
  vendor          Vendor      @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  orderItems      OrderItem[]
  inventories     Inventory[]
  certifications  Certification[]
  cartItems       CartItem[]

  @@map("products")
}

model Order {
  id        String      @id @default(cuid())
  userId    String
  total     Float
  status    OrderStatus @default(PENDING)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  // Relations
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  orderItems OrderItem[]

  @@map("orders")
}

model OrderItem {
  id        String @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Float

  // Relations
  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("order_items")
}

model Inventory {
  id          String @id @default(cuid())
  productId   String
  warehouseId String
  quantity    Int
  location    String

  // Relations
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("inventories")
}

model Certification {
  id            String      @id @default(cuid())
  productId     String
  blockchainTx  String      @unique
  halalScore    Int
  status        HalalStatus @default(PENDING)
  issuedBy      String
  issuedAt      DateTime    @default(now())

  // Relations
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("certifications")
}

model CartItem {
  id        String @id @default(cuid())
  userId    String
  productId String
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("cart_items")
}
