import { ProductsService } from './products.service';
export declare class ProductsController {
    private readonly productsService;
    constructor(productsService: ProductsService);
    findAll(): Promise<{
        id: string;
        name: string;
        createdAt: Date;
        updatedAt: Date;
        description: string | null;
        price: number;
        compareAtPrice: number | null;
        category: string;
        subcategory: string | null;
        sku: string;
        barcode: string | null;
        weight: number | null;
        dimensions: string | null;
        images: string[];
        vendorId: string;
        halalCertified: boolean;
        blockchainHash: string | null;
        stockQuantity: number;
        minStockLevel: number;
        maxStockLevel: number;
        isActive: boolean;
        tags: string[];
        rating: number | null;
        reviewCount: number;
    }[]>;
    findOne(id: string): Promise<{
        id: string;
        name: string;
        createdAt: Date;
        updatedAt: Date;
        description: string | null;
        price: number;
        compareAtPrice: number | null;
        category: string;
        subcategory: string | null;
        sku: string;
        barcode: string | null;
        weight: number | null;
        dimensions: string | null;
        images: string[];
        vendorId: string;
        halalCertified: boolean;
        blockchainHash: string | null;
        stockQuantity: number;
        minStockLevel: number;
        maxStockLevel: number;
        isActive: boolean;
        tags: string[];
        rating: number | null;
        reviewCount: number;
    } | null>;
    create(createProductDto: any): Promise<{
        id: string;
        name: string;
        createdAt: Date;
        updatedAt: Date;
        description: string | null;
        price: number;
        compareAtPrice: number | null;
        category: string;
        subcategory: string | null;
        sku: string;
        barcode: string | null;
        weight: number | null;
        dimensions: string | null;
        images: string[];
        vendorId: string;
        halalCertified: boolean;
        blockchainHash: string | null;
        stockQuantity: number;
        minStockLevel: number;
        maxStockLevel: number;
        isActive: boolean;
        tags: string[];
        rating: number | null;
        reviewCount: number;
    }>;
    update(id: string, updateProductDto: any): Promise<{
        id: string;
        name: string;
        createdAt: Date;
        updatedAt: Date;
        description: string | null;
        price: number;
        compareAtPrice: number | null;
        category: string;
        subcategory: string | null;
        sku: string;
        barcode: string | null;
        weight: number | null;
        dimensions: string | null;
        images: string[];
        vendorId: string;
        halalCertified: boolean;
        blockchainHash: string | null;
        stockQuantity: number;
        minStockLevel: number;
        maxStockLevel: number;
        isActive: boolean;
        tags: string[];
        rating: number | null;
        reviewCount: number;
    }>;
    remove(id: string): Promise<{
        id: string;
        name: string;
        createdAt: Date;
        updatedAt: Date;
        description: string | null;
        price: number;
        compareAtPrice: number | null;
        category: string;
        subcategory: string | null;
        sku: string;
        barcode: string | null;
        weight: number | null;
        dimensions: string | null;
        images: string[];
        vendorId: string;
        halalCertified: boolean;
        blockchainHash: string | null;
        stockQuantity: number;
        minStockLevel: number;
        maxStockLevel: number;
        isActive: boolean;
        tags: string[];
        rating: number | null;
        reviewCount: number;
    }>;
}
